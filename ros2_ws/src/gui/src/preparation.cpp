#include "gui/preparation.h"
#include "gui/hello_gui.h"
#include "./ui_input.h"  // Generated by Qt's UI compiler
#include "rclcpp/clock.hpp"
#include "rviz_common/render_panel.hpp"
#include "rviz_common/ros_integration/ros_node_abstraction.hpp"
#include "rviz_common/visualization_manager.hpp"
#include "rviz_rendering/render_window.hpp"

Form::Form(
    QApplication *app,
    rviz_common::ros_integration::RosNodeAbstractionIface::WeakPtr rviz_ros_node,
    QWidget* shared_rviz_widget,
    QWidget *parent) :
    app_(app), node_weak_ptr_(rviz_ros_node),rviz_widget(shared_rviz_widget), QMainWindow(parent),
    ui(new Ui::Form)
{
    ui->setupUi(this);
    connect(ui->back_btn, &QPushButton::clicked, this, [this]() {
        emit backToMainWindow();
    });
    if(!config.load("config/joint_state.conf")) {
        std::cerr << "Fail to load config\n";
    }

    node = node_weak_ptr_.lock()->get_raw_node();

    joint_subscription_ = node->create_subscription<sensor_msgs::msg::JointState>(
    "/joint_states", 10,
    std::bind(&Form::topic_callback, this, std::placeholders::_1));
}

Form::~Form()
{
    delete ui;
}


void Form::topic_callback(const sensor_msgs::msg::JointState::SharedPtr msg)
{
    ui->joint1_text->setText(QString::number(msg->position[0], 'f', 2));
    ui->joint2_text->setText(QString::number(msg->position[1], 'f', 2));
    ui->joint3_text->setText(QString::number(msg->position[2], 'f', 2));
    ui->joint4_text->setText(QString::number(msg->position[3], 'f', 2));
    ui->joint5_text->setText(QString::number(msg->position[4], 'f', 2));
    ui->joint6_text->setText(QString::number(msg->position[5], 'f', 2));


//   RCLCPP_INFO(node->get_logger(), "Received joint state:");
//   for (size_t i = 0; i < msg->name.size(); ++i) {
//     RCLCPP_INFO(node->get_logger(), "  %s: %f", msg->name[i].c_str(), msg->position[i]);
//   }
}

void Form::on_save_joint_btn_clicked(){
    std::string section = "robot_description";
    config.set(section,"joint1", ui->joint1_text->text().toStdString());
    config.set(section,"joint2", ui->joint2_text->text().toStdString());
    config.set(section,"joint3", ui->joint3_text->text().toStdString());
    config.set(section,"joint4", ui->joint4_text->text().toStdString());
    config.set(section,"joint5", ui->joint5_text->text().toStdString());
    config.set(section,"joint6", ui->joint6_text->text().toStdString());
    config.save("config/joint_state.conf");
    checkFileChange();
    // --- Save to a .txt file ---
    RCLCPP_INFO(node->get_logger(), "Saved param");
}


void Form::closeRviz()
{
    ui->rviz_display->layout()->removeWidget(rviz_widget);
    rviz_widget->setParent(nullptr);  // Detach widget from UI, but do not delete
    // Do NOT delete rviz_widget, it's owned elsewhere
    rviz_widget = nullptr;
}
void Form::openRviz(QWidget* shared_rviz_widget)
{
    rviz_widget = shared_rviz_widget;
    ui->rviz_display->setLayout(new QVBoxLayout);
    ui->rviz_display->layout()->addWidget(rviz_widget);
    rviz_widget->show();

}

void Form::checkFileChange() {
    auto new_time = std::filesystem::last_write_time("config/joint_state.conf");
    if (new_time != last_time) {
        config.reload("config/joint_state.conf");
        last_time = new_time;
    }
}
